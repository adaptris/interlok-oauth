import org.apache.tools.ant.taskdefs.condition.Os

ext {
  interlokCoreVersion = project.hasProperty('interlokCoreVersion') ? project.getProperty('interlokCoreVersion') : '3.8-SNAPSHOT'
  releaseVersion = project.hasProperty('releaseVersion') ? project.getProperty('releaseVersion') : '3.8-SNAPSHOT'
  nexusBaseUrl = project.hasProperty('nexusBaseUrl') ? project.getProperty('nexusBaseUrl') : 'https://nexus.adaptris.net/nexus'
  mavenPublishUrl = project.hasProperty('mavenPublishUrl') ? project.getProperty('mavenPublishUrl') : nexusBaseUrl + '/content/repositories/snapshots'
  javadocsBaseUrl = nexusBaseUrl + "/content/sites/javadocs/com/adaptris"
  repoUsername = project.hasProperty('repoUsername') ? project.getProperty('repoUsername') : 'unknown'
  repoPassword = project.hasProperty('repoPassword') ? project.getProperty('repoPassword') : 'unknown'
  defaultNexusRepo = project.hasProperty('defaultNexusRepo') ? project.getProperty('defaultNexusRepo') : 'https://repo1.maven.org/maven2/'
  offlineJavadocPackageDir = new File(project.buildDir, "offline-javadoc-packages")

  interlokJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-core/" + interlokCoreVersion
  interlokCommonJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-common/" + interlokCoreVersion
  slf4jVersion = '1.7.25'
  jacksonVersion = '2.9.8'
  log4j2Version = '2.8.1'
}

ext.hasGraphViz = { ->
  def app = "dot"
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    app = app + ".exe"
  }
  return System.getenv("PATH").split(File.pathSeparator).any{
    java.nio.file.Paths.get("${it}").resolve(app).toFile().exists()
  }
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

task clean(type: Delete) {
  delete project.buildDir
}

subprojects {
  // Apply the java plugin to add support for Java
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'maven-publish'
  apply plugin: "jacoco"

  sourceCompatibility = 1.8
  group   = 'com.adaptris'
  version = releaseVersion
  def versionDir = "$buildDir/version"

  // In this section you declare where to find the dependencies of your project
  repositories {
    mavenCentral()
    maven { url "$defaultNexusRepo" }
    maven { url "$nexusBaseUrl/content/groups/public" }
    maven { url "$nexusBaseUrl/content/repositories/snapshots" }
    maven { url "$nexusBaseUrl/content/repositories/releases" }
  }

  configurations {
    javadoc {}
    umlDoclet {}
    offlineJavadocPackages {}
    all*.exclude group: 'c3p0'
    all*.exclude group: 'commons-logging'
    all*.exclude group: 'javamail'
    all*.exclude group: 'javax.mail', module: 'mail'
    all*.exclude group: 'org.glassfish.hk2.external'
    all*.exclude group: 'xalan', module: 'xalan'
    all*.exclude group: 'net.sf.saxon', module: 'saxon'
    all*.exclude group: 'org.codehaus.woodstox'
    all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 300, 'seconds'
  }

  // In this section you declare the dependencies for your production and test code
  dependencies {
      compile ("com.adaptris:interlok-core:$interlokCoreVersion") { changing= true}
      compile ("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}
      compile ("org.slf4j:slf4j-api:$slf4jVersion")
      annotationProcessor ("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}
      testCompile ('junit:junit:4.12')
      testCompile ("com.adaptris:interlok-stubs:$interlokCoreVersion") { changing= true}
      testCompile ("org.apache.logging.log4j:log4j-core:$log4j2Version")
      testCompile ("org.apache.logging.log4j:log4j-1.2-api:$log4j2Version")
      testCompile ("org.apache.logging.log4j:log4j-api:$log4j2Version")
      testCompile ("org.mockito:mockito-all:1.10.19")

      javadoc("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}
      umlDoclet("nl.talsmasoftware:umldoclet:2.0.0")
      offlineJavadocPackages ("com.adaptris:interlok-core:$interlokCoreVersion:javadoc@jar") { changing= true}
      offlineJavadocPackages ("com.adaptris:interlok-common:$interlokCoreVersion:javadoc@jar") { changing= true}

  }

  javadoc {
    onlyIf {
      !hasGraphViz()
    }
    configure(options) {
      options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
      options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
      taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
      options.addStringOption "tagletpath", configurations.javadoc.asPath
    }
  }

  jacoco {
    toolVersion="0.8.1"
  }

  jacocoTestReport {
      reports {
          xml.enabled true
          html.enabled true
      }
  }

  sourceSets {
    main {
      output.dir(versionDir, builtBy: 'generateVersion')
    }
  }

  // Generate the META-INF/adaptris-version file
  task generateVersion {
    doLast {
      def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
      versionFile.getParentFile().mkdirs()
      ant.propertyfile(file: versionFile) {
        entry(key: 'component.name', value: componentName)
        entry(key: 'build.version', value: releaseVersion)
        entry(key: 'groupId', value: project.group)
        entry(key: 'artifactId', value: project.name)
        entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
      }
    }
  }


  task offlinePackageList(type: Copy) {
    description 'Build an offline package-list for javadocs'
    group 'Documentation'

    project.configurations.offlineJavadocPackages.collect { dependency ->
      from(zipTree(dependency)) {
        into dependency.name
      }
    }
    include "package-list"
    into offlineJavadocPackageDir
  }

  task umlJavadoc(type: Javadoc) {
    group 'Documentation'
    description 'Build javadocs using plantuml + graphviz + umldoclet, if dot is available'

    onlyIf {
      hasGraphViz()
    }
    source = sourceSets.main.allJava
    classpath = project.sourceSets.main.compileClasspath
    configure(options) {
      options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
      options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
      taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
      options.addStringOption "tagletpath", configurations.javadoc.asPath
      options.docletpath = configurations.umlDoclet.files.asType(List)
      options.doclet = "nl.talsmasoftware.umldoclet.UMLDoclet"
      options.addStringOption "umlBasePath", destinationDir.getCanonicalPath()
      options.addStringOption "umlImageFormat", "SVG"
      options.addStringOption "umlExcludedReferences", "java.lang.Exception,java.lang.Object,java.lang.Enum"
      options.addStringOption "umlIncludePrivateClasses","false"
      options.addStringOption "umlIncludePackagePrivateClasses","false"
      options.addStringOption "umlIncludeProtectedClasses","false"
      options.addStringOption "umlIncludeAbstractSuperclassMethods","false"
      options.addStringOption "umlIncludeConstructors","false"
      options.addStringOption "umlIncludePublicFields","false"
      options.addStringOption "umlIncludePackagePrivateFields","false"
      options.addStringOption "umlIncludeProtectedFields", "false"
      options.addStringOption "umlIncludeDeprecatedClasses", "false"
      options.addStringOption "umlIncludePrivateInnerClasses", "false"
      options.addStringOption "umlIncludePackagePrivateInnerClasses", "false"
      options.addStringOption "umlIncludeProtectedInnerClasses","false"
    }
  }

  check.dependsOn jacocoTestReport
  javadoc.dependsOn offlinePackageList,umlJavadoc

}
